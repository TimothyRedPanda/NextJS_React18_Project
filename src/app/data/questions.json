[
	{
		"title": "Array.concat",
		"description": "The `concat` method merges two or more arrays and returns a new array.",
		"example": "// Declare two arrays\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\n// Merge the arrays\nconst mergedArray = array1.concat(array2);\n// Print the merged array\nconsole.log(mergedArray); // [1, 2, 3, 4, 5, 6]\n",
		"output": "[1, 2, 3, 4, 5, 6]"
	},
	{
		"title": "Array.every",
		"description": "The `every` method tests whether all elements in the array pass the test implemented by the provided function.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Check if all numbers are less than 6\nconst allLessThanSix = numbers.every(num => num < 6);\n// Print the result\nconsole.log(allLessThanSix); // true\n",
		"output": "true"
	},
	{
		"title": "Array.filter",
		"description": "The `filter` method creates a new array with all elements that pass the test implemented by the provided function.",
		"example": "// Filter out numbers greater than 2\nconst array = [1, 2, 3, 4];\nconst result = array.filter(x => x > 2);\n// Print the result\nconsole.log(result);\n",
		"output": "[3, 4]"
	},
	{
		"title": "Array.find",
		"description": "The `find` method returns the value of the first element in the array that satisfies the provided testing function.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Find the first number greater than 3\nconst found = numbers.find(num => num > 3);\n// Print the found number\nconsole.log(found); // 4\n",
		"output": "4"
	},
	{
		"title": "Array.findIndex",
		"description": "The `findIndex` method returns the index of the first element in the array that satisfies the provided testing function.",
		"example": "// Find the index of the first number greater than 2\nconst array = [1, 2, 3, 4];\nconst index = array.findIndex(x => x > 2);\n// Print the index\nconsole.log(index);\n",
		"output": "2"
	},
	{
		"title": "Array.flat",
		"description": "The `flat` method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
		"example": "// Declare an array with nested sub-arrays\nconst nestedArray = [1, [2, [3, 4], 5]];\n// Flatten the array one level deep\nconst flattened = nestedArray.flat();\n// Print the flattened array\nconsole.log(flattened); // [1, 2, [3, 4], 5]\n",
		"output": "[1, 2, [3, 4], 5]"
	},
	{
		"title": "Array.flatMap",
		"description": "The `flatMap` method first maps each element using a mapping function, then flattens the result into a new array.",
		"example": "// Map and flatten an array\nconst array = [1, 2, 3];\nconst result = array.flatMap(x => [x, x * 2]);\n// Print the result\nconsole.log(result);\n",
		"output": "[1, 2, 2, 4, 3, 6]"
	},
	{
		"title": "Array.forEach",
		"description": "The `forEach` method executes a provided function once for each array element.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3];\n// Iterate over each number and print it\nnumbers.forEach(num => {\n  console.log(num);\n});\n",
		"output": "1\n2\n3"
	},
	{
		"title": "Array.from",
		"description": "The `Array.from` method creates a new, shallow-copied Array instance from an array-like or iterable object.",
		"example": "// Create an array from a string\nconst array = Array.from('hello');\n// Print the array\nconsole.log(array);\n",
		"output": "['h', 'e', 'l', 'l', 'o']"
	},
	{
		"title": "Array.includes",
		"description": "The `includes` method determines whether an array includes a certain value among its entries, returning true or false as appropriate.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Check if the array includes the number 3\nconst includesThree = numbers.includes(3);\n// Print the result\nconsole.log(includesThree); // true\n",
		"output": "true"
	},
	{
		"title": "Array.isArray",
		"description": "The `Array.isArray` method determines whether the passed value is an array.",
		"example": "// Check if a value is an array\nconst arr = [1, 2, 3];\nconsole.log(Array.isArray(arr));\nconsole.log(Array.isArray({}));\n",
		"output": "true\nfalse"
	},
	{
		"title": "Array.join",
		"description": "The `join` method joins all elements of an array into a string and returns this string.",
		"example": "// Declare an array of words\nconst words = ['Hello', 'world'];\n// Join the words into a single string\nconst sentence = words.join(' ');\n// Print the sentence\nconsole.log(sentence); // 'Hello world'\n",
		"output": "'Hello world'"
	},
	{
		"title": "Array.map",
		"description": "The `map` method creates a new array with the results of calling a provided function on every element in the calling array.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Create a new array with each number doubled\nconst doubled = numbers.map(num => num * 2);\n// Print the new array\nconsole.log(doubled); // [2, 4, 6, 8, 10]\n",
		"output": "[2, 4, 6, 8, 10]"
	},
	{
		"title": "Array.of",
		"description": "The `Array.of` method creates a new Array instance with a variable number of arguments, regardless of the number or type of the arguments.",
		"example": "// Create an array with various elements\nconst array = Array.of(1, 'a', true);\n// Print the array\nconsole.log(array);\n",
		"output": "[1, 'a', true]"
	},
	{
		"title": "Array.pop",
		"description": "The `pop` method removes the last element from an array and returns that element.",
		"example": "// Declare an array\nconst fruits = ['apple', 'banana', 'orange'];\n// Remove the last element\nconst lastElement = fruits.pop();\n// Print the array and removed element\nconsole.log(fruits); // ['apple', 'banana']\nconsole.log(lastElement); // 'orange'\n",
		"output": "['apple', 'banana']\n'orange'"
	},
	{
		"title": "Array.push",
		"description": "The `push` method adds one or more elements to the end of an array and returns the new length of the array.",
		"example": "// Add elements to an array\nconst array = [1, 2];\narray.push(3, 4);\n// Print the updated array\nconsole.log(array);\n",
		"output": "[1, 2, 3, 4]"
	},
	{
		"title": "Array.reduce",
		"description": "The `reduce` method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4];\n// Reduce the array to a single sum\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\n// Print the sum\nconsole.log(sum);\n",
		"output": "10"
	},
	{
		"title": "Array.reduceRight",
		"description": "The `reduceRight` method applies a function against an accumulator and each element (from right to left) in the array to reduce it to a single value.",
		"example": "// Concatenate array elements in reverse order\nconst array = ['a', 'b', 'c'];\nconst result = array.reduceRight((acc, current) => acc + current);\n// Print the result\nconsole.log(result);\n",
		"output": "cba"
	},
	{
		"title": "Array.reverse",
		"description": "The `reverse` method reverses the elements of an array in place and returns the reversed array.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Reverse the array\nnumbers.reverse();\n// Print the reversed array\nconsole.log(numbers); // [5, 4, 3, 2, 1]\n",
		"output": "[5, 4, 3, 2, 1]"
	},
	{
		"title": "Array.shift",
		"description": "The `shift` method removes the first element from an array and returns that element.",
		"example": "// Declare an array\nconst fruits = ['apple', 'banana', 'orange'];\n// Remove the first element\nconst firstElement = fruits.shift();\n// Print the array and removed element\nconsole.log(fruits); // ['banana', 'orange']\nconsole.log(firstElement); // 'apple'\n",
		"output": "['banana', 'orange']\n'apple'"
	},
	{
		"title": "Array.slice",
		"description": "The `slice` method returns a shallow copy of a portion of an array into a new array object.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Get a portion of the array\nconst sliced = numbers.slice(1, 4);\n// Print the sliced array\nconsole.log(sliced); // [2, 3, 4]\n",
		"output": "[2, 3, 4]"
	},
	{
		"title": "Array.some",
		"description": "The `some` method tests whether at least one element in the array passes the test implemented by the provided function.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Check if some numbers are greater than 4\nconst someGreaterThanFour = numbers.some(num => num > 4);\n// Print the result\nconsole.log(someGreaterThanFour); // true\n",
		"output": "true"
	},
	{
		"title": "Array.sort",
		"description": "The `sort` method sorts the elements of an array in place and returns the sorted array.",
		"example": "// Declare an array of numbers\nconst numbers = [5, 3, 8, 1, 2];\n// Sort the array in ascending order\nnumbers.sort((a, b) => a - b);\n// Print the sorted array\nconsole.log(numbers); // [1, 2, 3, 5, 8]\n",
		"output": "[1, 2, 3, 5, 8]"
	},
	{
		"title": "Array.splice",
		"description": "The `splice` method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Remove two elements starting at index 1\nconst removed = numbers.splice(1, 2);\n// Print the modified array and removed elements\nconsole.log(numbers); // [1, 4, 5]\nconsole.log(removed); // [2, 3]\n",
		"output": "[1, 4, 5]\n[2, 3]"
	},
	{
		"title": "Array.unshift",
		"description": "The `unshift` method adds one or more elements to the beginning of an array and returns the new length of the array.",
		"example": "// Declare an array\nconst fruits = ['banana', 'orange'];\n// Add 'apple' to the beginning\nconst newLength = fruits.unshift('apple');\n// Print the array and new length\nconsole.log(fruits); // ['apple', 'banana', 'orange']\nconsole.log(newLength); // 3\n",
		"output": "['apple', 'banana', 'orange']\n3"
	},
	{
		"title": "Boolean",
		"description": "The `Boolean` function converts a value to a boolean (true or false).",
		"example": "// Convert a number to boolean\nconst isTrue = Boolean(1);\n// Print the boolean value\nconsole.log(isTrue);\n",
		"output": "true"
	},
	{
		"title": "Boolean() with falsy values",
		"description": "Falsy values in JavaScript are values that convert to false when used in boolean contexts.",
		"example": "// Convert a falsy value to boolean\nconst isFalse = Boolean(0);\n// Print the boolean value\nconsole.log(isFalse);\n",
		"output": "false"
	},
	{
		"title": "Date object",
		"description": "The `Date` object represents a single moment in time in a platform-independent format.",
		"example": "// Create a new Date object for the current date and time\nconst now = new Date();\n// Print the Date object\nconsole.log(now); // e.g., 2024-07-30T12:34:56.789Z\n",
		"output": "e.g., 2024-07-30T12:34:56.789Z"
	},
	{
		"title": "Date.UTC",
		"description": "The `Date.UTC` method returns the number of milliseconds between January 1, 1970, 00:00:00 UTC and the specified date in UTC.",
		"example": "// Get the UTC timestamp\nconst utcTimestamp = Date.UTC(2024, 7, 2);\n// Print the UTC timestamp\nconsole.log(utcTimestamp);\n",
		"output": "1727865600000 // The output will vary"
	},
	{
		"title": "Date.getDate",
		"description": "The `getDate` method returns the day of the month for a specified date according to local time.",
		"example": "// Get the day of the month from a date\nconst date = new Date('2024-08-02');\nconst day = date.getDate();\n// Print the day\nconsole.log(day);\n",
		"output": "2"
	},
	{
		"title": "Date.getDay",
		"description": "The `getDay` method returns the day of the week (0 for Sunday, 1 for Monday, etc.) for a specified date according to local time.",
		"example": "// Get the day of the week from a date\nconst date = new Date('2024-08-02');\nconst dayOfWeek = date.getDay();\n// Print the day of the week\nconsole.log(dayOfWeek);\n",
		"output": "5 // Friday"
	},
	{
		"title": "Date.getFullYear",
		"description": "The `getFullYear` method returns the year of the specified date according to local time.",
		"example": "// Get the full year from a date\nconst date = new Date('2024-08-02');\nconst year = date.getFullYear();\n// Print the year\nconsole.log(year);\n",
		"output": "2024"
	},
	{
		"title": "Date.getHours",
		"description": "The `getHours` method returns the hour of the date (0-23) according to local time.",
		"example": "// Get the hour from a date\nconst date = new Date('2024-08-02T14:30:00');\nconst hours = date.getHours();\n// Print the hours\nconsole.log(hours);\n",
		"output": "14"
	},
	{
		"title": "Date.getMinutes",
		"description": "The `getMinutes` method returns the minutes of the date (0-59) according to local time.",
		"example": "// Get the minutes from a date\nconst date = new Date('2024-08-02T14:30:00');\nconst minutes = date.getMinutes();\n// Print the minutes\nconsole.log(minutes);\n",
		"output": "30"
	},
	{
		"title": "Date.getMonth",
		"description": "The `getMonth` method returns the month of a date (0 for January, 1 for February, etc.) according to local time.",
		"example": "// Get the month from a date\nconst date = new Date('2024-08-02');\nconst month = date.getMonth();\n// Print the month\nconsole.log(month);\n",
		"output": "7 // August"
	},
	{
		"title": "Date.now",
		"description": "The `now` method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.",
		"example": "// Get the current time in milliseconds\nconst now = Date.now();\n// Print the current time\nconsole.log(now); // (current time in milliseconds)\n",
		"output": "(current time in milliseconds)"
	},
	{
		"title": "Date.parse",
		"description": "The `Date.parse` method parses a date string and returns the number of milliseconds between January 1, 1970, 00:00:00 UTC and the specified date.",
		"example": "// Parse a date string\nconst timestamp = Date.parse('2024-08-02T00:00:00Z');\n// Print the timestamp\nconsole.log(timestamp);\n",
		"output": "1727865600000 // The output will vary"
	},
	{
		"title": "Date.setDate",
		"description": "The `setDate` method sets the day of the month for a specified date according to local time.",
		"example": "// Set the day of the month of a date\nconst date = new Date();\ndate.setDate(15);\n// Print the updated date\nconsole.log(date);\n",
		"output": "'Sun Aug 15 ...' // The output will vary"
	},
	{
		"title": "Date.setFullYear",
		"description": "The `setFullYear` method sets the full year for a specified date according to local time.",
		"example": "// Set the year of a date\nconst date = new Date();\ndate.setFullYear(2025);\n// Print the updated date\nconsole.log(date);\n",
		"output": "'Fri Aug 02 2025 ...' // The output will vary"
	},
	{
		"title": "Date.setHours",
		"description": "The `setHours` method sets the hour for a specified date according to local time.",
		"example": "// Set the hour of a date\nconst date = new Date();\ndate.setHours(10);\n// Print the updated date\nconsole.log(date);\n",
		"output": "'Fri Aug 02 ... 10:00:00 ...' // The output will vary"
	},
	{
		"title": "Date.setMinutes",
		"description": "The `setMinutes` method sets the minutes for a specified date according to local time.",
		"example": "// Set the minutes of a date\nconst date = new Date();\ndate.setMinutes(45);\n// Print the updated date\nconsole.log(date);\n",
		"output": "'Fri Aug 02 ... 00:45:00 ...' // The output will vary"
	},
	{
		"title": "Date.setMonth",
		"description": "The `setMonth` method sets the month for a specified date according to local time.",
		"example": "// Set the month of a date\nconst date = new Date();\ndate.setMonth(11); // December\n// Print the updated date\nconsole.log(date);\n",
		"output": "'Sun Dec 01 ...' // The output will vary"
	},
	{
		"title": "Date.setSeconds",
		"description": "The `setSeconds` method sets the seconds for a specified date according to local time.",
		"example": "// Set the seconds of a date\nconst date = new Date();\ndate.setSeconds(30);\n// Print the updated date\nconsole.log(date);\n",
		"output": "'Fri Aug 02 ... 00:00:30 ...' // The output will vary"
	},
	{
		"title": "Date.toISOString",
		"description": "The `toISOString` method returns a string representing the date in ISO 8601 format.",
		"example": "// Get the ISO string of a date\nconst date = new Date();\nconst isoString = date.toISOString();\n// Print the ISO string\nconsole.log(isoString);\n",
		"output": "'2024-08-02T00:00:00.000Z' // The output will vary"
	},
	{
		"title": "Date.toLocaleDateString",
		"description": "The `toLocaleDateString` method returns a string with a language-sensitive representation of the date portion of this date.",
		"example": "// Create a new Date object\nconst date = new Date();\n// Get the locale date string\nconst localeDateString = date.toLocaleDateString();\n// Print the locale date string\nconsole.log(localeDateString); // (current date as a locale string)\n",
		"output": "(current date as a locale string)"
	},
	{
		"title": "Date.toLocaleTimeString",
		"description": "The `toLocaleTimeString` method returns a string with a language-sensitive representation of the time portion of this date.",
		"example": "// Create a new Date object\nconst date = new Date();\n// Get the locale time string\nconst localeTimeString = date.toLocaleTimeString();\n// Print the locale time string\nconsole.log(localeTimeString); // (current time as a locale string)\n",
		"output": "(current time as a locale string)"
	},
	{
		"title": "Date.toString",
		"description": "The `toString` method returns a string representing the specified Date object.",
		"example": "// Create a new Date object\nconst date = new Date();\n// Get the string representation of the date\nconst dateString = date.toString();\n// Print the string\nconsole.log(dateString); // (current date and time as a string)\n",
		"output": "(current date and time as a string)"
	},
	{
		"title": "Function.apply",
		"description": "The `apply` method calls a function with a given `this` value and arguments provided as an array.",
		"example": "// Declare a function\nfunction greet(greeting) {\n  console.log(`${greeting}, ${this.name}`);\n}\n// Declare an object\nconst person = { name: 'Alice' };\n// Call the function with 'person' as 'this' and arguments as array\nconst applyResult = greet.apply(person, ['Hello']);\n",
		"output": "'Hello, Alice'"
	},
	{
		"title": "Function.bind",
		"description": "The `bind` method creates a new function that, when called, has its `this` keyword set to the provided value.",
		"example": "// Declare a function\nfunction greet(greeting) {\n  console.log(`${greeting}, ${this.name}`);\n}\n// Declare an object\nconst person = { name: 'Alice' };\n// Bind the function to 'person'\nconst boundGreet = greet.bind(person);\n// Call the bound function\nboundGreet('Hello');\n",
		"output": "'Hello, Alice'"
	},
	{
		"title": "Function.call",
		"description": "The `call` method calls a function with a given `this` value and arguments provided individually.",
		"example": "// Declare a function\nfunction greet(greeting) {\n  console.log(`${greeting}, ${this.name}`);\n}\n// Declare an object\nconst person = { name: 'Alice' };\n// Call the function with 'person' as 'this'\nconst callResult = greet.call(person, 'Hello');\n",
		"output": "'Hello, Alice'"
	},
	{
		"title": "Intl.DateTimeFormat",
		"description": "The `DateTimeFormat` object enables language-sensitive date and time formatting.",
		"example": "// Create a DateTimeFormat object\nconst formatter = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n// Format a date\nconst formattedDate = formatter.format(new Date());\n// Print the formatted date\nconsole.log(formattedDate);\n",
		"output": "'August 2, 2024'"
	},
	{
		"title": "Intl.NumberFormat",
		"description": "The `NumberFormat` object enables language-sensitive number formatting.",
		"example": "// Create a NumberFormat object\nconst formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });\n// Format a number\nconst formattedNum = formatter.format(1234.56);\n// Print the formatted number\nconsole.log(formattedNum);\n",
		"output": "'$1,234.56'"
	},
	{
		"title": "JSON.parse",
		"description": "The `parse` method parses a JSON string, constructing the JavaScript value or object described by the string.",
		"example": "// Declare a JSON string\nconst jsonString = '{\"name\":\"Alice\",\"age\":25}';\n// Parse the JSON string to an object\nconst obj = JSON.parse(jsonString);\n// Print the object\nconsole.log(obj); // { name: 'Alice', age: 25 }\n",
		"output": "{ name: 'Alice', age: 25 }"
	},
	{
		"title": "JSON.stringify",
		"description": "The `JSON.stringify` method converts a JavaScript object or value to a JSON string.",
		"example": "// Declare an object\nconst person = { name: 'John', age: 30 };\n// Convert the object to a JSON string\nconst jsonString = JSON.stringify(person);\n// Print the JSON string\nconsole.log(jsonString); // '{\"name\":\"John\",\"age\":30}'\n",
		"output": "{\"name\":\"John\",\"age\":30}"
	},
	{
		"title": "JSON.stringify with spacing",
		"description": "The `stringify` method can also take a second parameter to control the spacing in the output JSON string.",
		"example": "// Declare an object\nconst obj = { name: 'Alice', age: 25 };\n// Convert the object to a JSON string with spacing\nconst jsonString = JSON.stringify(obj, null, 2);\n// Print the JSON string\nconsole.log(jsonString);\n",
		"output": "{\n  \"name\": \"Alice\",\n  \"age\": 25\n}"
	},
	{
		"title": "Map.clear",
		"description": "The `clear` method removes all elements from a Map object.",
		"example": "// Create a Map\nconst map = new Map([['name', 'Alice'], ['age', 25]]);\n// Clear all elements from the Map\nmap.clear();\n// Print the empty Map\nconsole.log(map);\n",
		"output": "Map {}"
	},
	{
		"title": "Map.delete",
		"description": "The `delete` method removes the specified element from the Map object by key.",
		"example": "// Create a Map\nconst map = new Map([['name', 'Alice'], ['age', 25]]);\n// Remove the key-value pair with key 'age'\nconst deleted = map.delete('age');\n// Print the result\nconsole.log(deleted);\n// Print the updated Map\nconsole.log(map);\n",
		"output": "true\nMap { 'name' => 'Alice' }"
	},
	{
		"title": "Map.get",
		"description": "The `get` method returns the value associated with the specified key from the Map object.",
		"example": "// Create a Map\nconst map = new Map([['name', 'Alice'], ['age', 25]]);\n// Get the value associated with the key 'name'\nconst name = map.get('name');\n// Print the value\nconsole.log(name);\n",
		"output": "'Alice'"
	},
	{
		"title": "Map.has",
		"description": "The `has` method returns a boolean indicating whether a Map object contains a specified key.",
		"example": "// Create a Map\nconst map = new Map([['name', 'Alice'], ['age', 25]]);\n// Check if the Map contains the key 'age'\nconst hasAge = map.has('age');\n// Print the result\nconsole.log(hasAge);\n",
		"output": "true"
	},
	{
		"title": "Map.set",
		"description": "The `set` method adds or updates an element with a specified key and value in the Map object.",
		"example": "// Create a Map\nconst map = new Map();\n// Set key-value pairs\nmap.set('name', 'Alice').set('age', 25);\n// Print the Map\nconsole.log(map);\n",
		"output": "Map { 'name' => 'Alice', 'age' => 25 }"
	},
	{
		"title": "Math.abs",
		"description": "The `abs` function returns the absolute value of a number.",
		"example": "// Declare a number\nconst num = -5;\n// Get the absolute value of the number\nconst absNum = Math.abs(num);\n// Print the result\nconsole.log(absNum); // 5\n",
		"output": "5"
	},
	{
		"title": "Math.cbrt",
		"description": "The `cbrt` method returns the cube root of a number.",
		"example": "// Declare a number\nconst num = 27;\n// Get the cube root of the number\nconst cbrtNum = Math.cbrt(num);\n// Print the result\nconsole.log(cbrtNum);\n",
		"output": "3"
	},
	{
		"title": "Math.ceil",
		"description": "The `ceil` function returns the smallest integer greater than or equal to a given number.",
		"example": "// Declare a number\nconst num = 3.1;\n// Get the smallest integer greater than or equal to num\nconst ceiledNum = Math.ceil(num);\n// Print the result\nconsole.log(ceiledNum); // 4\n",
		"output": "4"
	},
	{
		"title": "Math.cos",
		"description": "The `cos` function returns the cosine of a number (angle in radians).",
		"example": "// Declare an angle in radians\nconst angle = Math.PI;\n// Get the cosine of the angle\nconst cosValue = Math.cos(angle);\n// Print the result\nconsole.log(cosValue); // -1\n",
		"output": "-1"
	},
	{
		"title": "Math.exp",
		"description": "The `exp` method returns e (Euler's number) raised to the power of a given number.",
		"example": "// Declare a number\nconst num = 2;\n// Get e raised to the power of the number\nconst expNum = Math.exp(num);\n// Print the result\nconsole.log(expNum);\n",
		"output": "7.3890560989306495"
	},
	{
		"title": "Math.floor",
		"description": "The `floor` function returns the largest integer less than or equal to a given number.",
		"example": "// Declare a number\nconst num = 3.7;\n// Get the largest integer less than or equal to num\nconst flooredNum = Math.floor(num);\n// Print the result\nconsole.log(flooredNum); // 3\n",
		"output": "3"
	},
	{
		"title": "Math.log",
		"description": "The `log` method returns the natural logarithm (base e) of a number.",
		"example": "// Declare a number\nconst num = 10;\n// Get the natural logarithm of the number\nconst logNum = Math.log(num);\n// Print the result\nconsole.log(logNum);\n",
		"output": "2.302585092994046"
	},
	{
		"title": "Math.log10",
		"description": "The `log10` method returns the base 10 logarithm of a number.",
		"example": "// Declare a number\nconst num = 100;\n// Get the base 10 logarithm of the number\nconst log10Num = Math.log10(num);\n// Print the result\nconsole.log(log10Num);\n",
		"output": "2"
	},
	{
		"title": "Math.log2",
		"description": "The `log2` method returns the base 2 logarithm of a number.",
		"example": "// Declare a number\nconst num = 8;\n// Get the base 2 logarithm of the number\nconst log2Num = Math.log2(num);\n// Print the result\nconsole.log(log2Num);\n",
		"output": "3"
	},
	{
		"title": "Math.max",
		"description": "The `max` function returns the largest of zero or more numbers.",
		"example": "// Declare some numbers\nconst a = 5, b = 10, c = 3;\n// Get the largest number\nconst maxNum = Math.max(a, b, c);\n// Print the result\nconsole.log(maxNum); // 10\n",
		"output": "10"
	},
	{
		"title": "Math.min",
		"description": "The `min` function returns the smallest of zero or more numbers.",
		"example": "// Declare some numbers\nconst a = 5, b = 10, c = 3;\n// Get the smallest number\nconst minNum = Math.min(a, b, c);\n// Print the result\nconsole.log(minNum); // 3\n",
		"output": "3"
	},
	{
		"title": "Math.pow",
		"description": "The `pow` function returns the base to the exponent power.",
		"example": "// Declare a base and an exponent\nconst base = 2, exponent = 3;\n// Get the base raised to the exponent power\nconst result = Math.pow(base, exponent);\n// Print the result\nconsole.log(result); // 8\n",
		"output": "8"
	},
	{
		"title": "Math.random",
		"description": "The `random` function returns a floating-point, pseudo-random number in the range 0 to less than 1.",
		"example": "// Generate a random number\nconst randomNum = Math.random();\n// Print the random number\nconsole.log(randomNum); // (a random number between 0 and 1)\n",
		"output": "(a random number between 0 and 1)"
	},
	{
		"title": "Math.round",
		"description": "The `round` function returns the value of a number rounded to the nearest integer.",
		"example": "// Declare a number\nconst num = 3.5;\n// Round the number to the nearest integer\nconst roundedNum = Math.round(num);\n// Print the result\nconsole.log(roundedNum); // 4\n",
		"output": "4"
	},
	{
		"title": "Math.sign",
		"description": "The `sign` function returns the sign of a number, indicating whether the number is positive, negative, or zero.",
		"example": "// Declare some numbers\nconst positiveNum = 5, negativeNum = -5, zero = 0;\n// Get the sign of each number\nconst signPositive = Math.sign(positiveNum);\nconst signNegative = Math.sign(negativeNum);\nconst signZero = Math.sign(zero);\n// Print the results\nconsole.log(signPositive); // 1\nconsole.log(signNegative); // -1\nconsole.log(signZero); // 0\n",
		"output": "1\n-1\n0"
	},
	{
		"title": "Math.sin",
		"description": "The `sin` function returns the sine of a number (angle in radians).",
		"example": "// Declare an angle in radians\nconst angle = Math.PI / 2;\n// Get the sine of the angle\nconst sinValue = Math.sin(angle);\n// Print the result\nconsole.log(sinValue); // 1\n",
		"output": "1"
	},
	{
		"title": "Math.sqrt",
		"description": "The `sqrt` function returns the square root of a number.",
		"example": "// Declare a number\nconst num = 16;\n// Get the square root of the number\nconst sqrtNum = Math.sqrt(num);\n// Print the result\nconsole.log(sqrtNum); // 4\n",
		"output": "4"
	},
	{
		"title": "Math.tan",
		"description": "The `tan` function returns the tangent of a number (angle in radians).",
		"example": "// Declare an angle in radians\nconst angle = Math.PI / 4;\n// Get the tangent of the angle\nconst tanValue = Math.tan(angle);\n// Print the result\nconsole.log(tanValue); // 1\n",
		"output": "1"
	},
	{
		"title": "Math.trunc",
		"description": "The `trunc` method returns the integer part of a number by removing any fractional digits.",
		"example": "// Declare a number\nconst num = 3.9;\n// Truncate the number\nconst truncatedNum = Math.trunc(num);\n// Print the result\nconsole.log(truncatedNum);\n",
		"output": "3"
	},
	{
		"title": "Number()",
		"description": "The `Number` function converts a value to a number.",
		"example": "// Convert a string to a number\nconst num = Number('123');\n// Print the number\nconsole.log(num);\n",
		"output": "123"
	},
	{
		"title": "Number() with invalid input",
		"description": "If the `Number` function receives an invalid input, it returns NaN (Not-a-Number).",
		"example": "// Convert an invalid string to a number\nconst invalidNum = Number('abc');\n// Print the result\nconsole.log(invalidNum);\n",
		"output": "NaN"
	},
	{
		"title": "Number.isNaN()",
		"description": "The `Number.isNaN` function determines whether a value is NaN and is of type number.",
		"example": "// Check if a number is NaN\nconst result = Number.isNaN(NaN);\n// Print the result\nconsole.log(result);\n",
		"output": "true"
	},
	{
		"title": "Number.parseFloat",
		"description": "The `parseFloat` function parses a string argument and returns a floating point number.",
		"example": "// Declare a string representing a number\nconst str = '3.14';\n// Parse the string as a floating point number\nconst num = parseFloat(str);\n// Print the number\nconsole.log(num); // 3.14\n",
		"output": "3.14"
	},
	{
		"title": "Number.parseInt",
		"description": "The `parseInt` function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).",
		"example": "// Declare a string representing a number\nconst str = '42';\n// Parse the string as an integer\nconst num = parseInt(str, 10);\n// Print the number\nconsole.log(num); // 42\n",
		"output": "42"
	},
	{
		"title": "Number.toFixed",
		"description": "The `toFixed` method formats a number using fixed-point notation.",
		"example": "// Declare a number\nconst num = 3.14159;\n// Format the number to 2 decimal places\nconst formattedNum = num.toFixed(2);\n// Print the formatted number\nconsole.log(formattedNum); // '3.14'\n",
		"output": "'3.14'"
	},
	{
		"title": "Number.toPrecision",
		"description": "The `toPrecision` method returns a string representing the number to the specified precision.",
		"example": "// Declare a number\nconst num = 3.14159;\n// Format the number to 4 significant digits\nconst formattedNum = num.toPrecision(4);\n// Print the formatted number\nconsole.log(formattedNum); // '3.142'\n",
		"output": "'3.142'"
	},
	{
		"title": "Object.assign",
		"description": "The `Object.assign` method copies all enumerable own properties from one or more source objects to a target object.",
		"example": "// Merge objects into a target object\nconst target = { a: 1 };\nconst source = { b: 2 };\nObject.assign(target, source);\n// Print the updated target object\nconsole.log(target);\n",
		"output": "{ a: 1, b: 2 }"
	},
	{
		"title": "Object.create",
		"description": "The `Object.create` method creates a new object with the specified prototype object and properties.",
		"example": "// Create an object with a prototype\nconst proto = { greet() { return 'Hello'; } };\nconst obj = Object.create(proto);\n// Use the prototype method\nconsole.log(obj.greet());\n",
		"output": "'Hello'"
	},
	{
		"title": "Object.entries",
		"description": "The `Object.entries` method returns an array of a given object's own enumerable string-keyed property [key, value] pairs.",
		"example": "// Get the entries of an object\nconst obj = { name: 'Alice', age: 25 };\nconst entries = Object.entries(obj);\n// Print the entries\nconsole.log(entries);\n",
		"output": "[['name', 'Alice'], ['age', 25]]"
	},
	{
		"title": "Object.freeze",
		"description": "The `Object.freeze` method freezes an object, preventing new properties from being added, existing properties from being removed, or modifying existing properties.",
		"example": "// Freeze an object\nconst obj = { name: 'Alice' };\nObject.freeze(obj);\nobj.name = 'Bob';\n// Print the object\nconsole.log(obj);\n",
		"output": "{ name: 'Alice' }"
	},
	{
		"title": "Object.keys",
		"description": "The `Object.keys` method returns an array of a given object's own enumerable property names.",
		"example": "// Get the keys of an object\nconst obj = { name: 'Alice', age: 25 };\nconst keys = Object.keys(obj);\n// Print the keys\nconsole.log(keys);\n",
		"output": "['name', 'age']"
	},
	{
		"title": "Object.prototype.hasOwnProperty",
		"description": "The `hasOwnProperty` method checks if an object has a specific property as its own (not inherited).",
		"example": "// Check if an object has a specific property\nconst obj = { name: 'Alice' };\nconsole.log(obj.hasOwnProperty('name'));\nconsole.log(obj.hasOwnProperty('age'));\n",
		"output": "true\nfalse"
	},
	{
		"title": "Object.seal",
		"description": "The `Object.seal` method seals an object, preventing new properties from being added and marking all existing properties as non-configurable.",
		"example": "// Seal an object\nconst obj = { name: 'Alice' };\nObject.seal(obj);\nobj.name = 'Bob';\n// Print the object\nconsole.log(obj);\n",
		"output": "{ name: 'Bob' }"
	},
	{
		"title": "Object.values",
		"description": "The `Object.values` method returns an array of a given object's own enumerable property values.",
		"example": "// Get the values of an object\nconst obj = { name: 'Alice', age: 25 };\nconst values = Object.values(obj);\n// Print the values\nconsole.log(values);\n",
		"output": "['Alice', 25]"
	},
	{
		"title": "Promise.catch",
		"description": "The `catch` method returns a Promise and deals with rejected cases only. It takes one argument: a callback function that is invoked when the Promise is rejected.",
		"example": "// Create a new Promise\nconst promise = new Promise((resolve, reject) => {\n  reject('Error');\n});\n// Handle the rejected promise\npromise.catch(error => {\n  console.log(error); // 'Error'\n});\n",
		"output": "'Error'"
	},
	{
		"title": "Promise.finally",
		"description": "The `finally` method returns a Promise. When the Promise is settled, i.e., either fulfilled or rejected, the specified callback function is executed.",
		"example": "// Create a new Promise\nconst promise = new Promise((resolve, reject) => {\n  resolve('Success');\n});\n// Handle the settled promise\npromise.finally(() => {\n  console.log('Promise settled');\n});\n",
		"output": "'Promise settled'"
	},
	{
		"title": "Promise.then",
		"description": "The `then` method returns a Promise. It takes up to two arguments: callback functions for the success and failure cases of the Promise.",
		"example": "// Create a new Promise\nconst promise = new Promise((resolve, reject) => {\n  resolve('Success');\n});\n// Handle the resolved promise\npromise.then(result => {\n  console.log(result); // 'Success'\n});\n",
		"output": "'Success'"
	},
	{
		"title": "Proxy",
		"description": "The `Proxy` object enables you to create a handler for an object that intercepts operations like property access, assignment, and function invocation.",
		"example": "// Create a target object\nconst target = {};\n// Create a handler object\nconst handler = {\n  get: (obj, prop) => `Property ${prop} accessed`\n};\n// Create a Proxy\nconst proxy = new Proxy(target, handler);\n// Access a property through the Proxy\nconsole.log(proxy.someProperty);\n",
		"output": "'Property someProperty accessed'"
	},
	{
		"title": "Reflect.apply",
		"description": "The `Reflect.apply` method calls a target function with arguments as specified by an array.",
		"example": "// Define a function\nfunction sum(a, b) {\n  return a + b;\n}\n// Call the function using Reflect.apply\nconst result = Reflect.apply(sum, null, [1, 2]);\n// Print the result\nconsole.log(result);\n",
		"output": "3"
	},
	{
		"title": "Reflect.deleteProperty",
		"description": "The `Reflect.deleteProperty` method deletes a property from a target object.",
		"example": "// Define an object\nconst obj = { name: 'Alice', age: 25 };\n// Delete the 'age' property\nReflect.deleteProperty(obj, 'age');\n// Print the updated object\nconsole.log(obj);\n",
		"output": "{ name: 'Alice' }"
	},
	{
		"title": "Reflect.get",
		"description": "The `Reflect.get` method returns the value of a property from a target object.",
		"example": "// Define an object\nconst obj = { name: 'Alice' };\n// Get the value of the 'name' property\nconst name = Reflect.get(obj, 'name');\n// Print the value\nconsole.log(name);\n",
		"output": "'Alice'"
	},
	{
		"title": "Reflect.ownKeys",
		"description": "The `Reflect.ownKeys` method returns an array of all property keys found directly on a target object.",
		"example": "// Define an object\nconst obj = { name: 'Alice', age: 25 };\n// Get all keys of the object\nconst keys = Reflect.ownKeys(obj);\n// Print the keys\nconsole.log(keys);\n",
		"output": "['name', 'age']"
	},
	{
		"title": "Reflect.set",
		"description": "The `Reflect.set` method sets the value of a property on a target object.",
		"example": "// Define an object\nconst obj = { name: 'Alice' };\n// Set the value of the 'name' property\nReflect.set(obj, 'name', 'Bob');\n// Print the updated object\nconsole.log(obj);\n",
		"output": "{ name: 'Bob' }"
	},
	{
		"title": "RegExp",
		"description": "The `RegExp` object is used for matching text with patterns. You can create a regular expression using the RegExp constructor.",
		"example": "// Create a regular expression\nconst regex = new RegExp('foo');\n// Test the regular expression\nconsole.log(regex.test('foobar'));\n",
		"output": "true"
	},
	{
		"title": "RegExp.exec",
		"description": "The `exec` method executes a search for a match between a regular expression and a specified string, returning an array of results.",
		"example": "// Execute a search for a match\nconst regex = /foo/;\nconst result = regex.exec('foobar');\n// Print the result\nconsole.log(result);\n",
		"output": "['foo']"
	},
	{
		"title": "RegExp.test",
		"description": "The `test` method tests for a match in a string. It returns true or false.",
		"example": "// Declare a regular expression\nconst regex = /world/;\n// Test if the string contains 'world'\nconst result = regex.test('Hello world');\n// Print the result\nconsole.log(result);\n",
		"output": "true"
	},
	{
		"title": "Set.add",
		"description": "The `add` method adds a new element to the Set object, returning the Set object.",
		"example": "// Create a Set\nconst set = new Set();\n// Add elements to the Set\nset.add(1).add(2).add(3);\n// Print the Set\nconsole.log(set);\n",
		"output": "Set { 1, 2, 3 }"
	},
	{
		"title": "Set.delete",
		"description": "The `delete` method removes a specified element from the Set, returning a boolean indicating if the element was removed.",
		"example": "// Create a Set\nconst set = new Set([1, 2, 3]);\n// Remove element 2 from the Set\nconst deleted = set.delete(2);\n// Print the result\nconsole.log(deleted);\n// Print the updated Set\nconsole.log(set);\n",
		"output": "true\nSet { 1, 3 }"
	},
	{
		"title": "Set.has",
		"description": "The `has` method returns a boolean indicating whether an element is present in the Set.",
		"example": "// Create a Set\nconst set = new Set([1, 2, 3]);\n// Check if the Set contains 2\nconst hasTwo = set.has(2);\n// Print the result\nconsole.log(hasTwo);\n",
		"output": "true"
	},
	{
		"title": "String.charAt",
		"description": "The `charAt` method returns the character at a specified index in a string.",
		"example": "// Get the character at index 1\nconst str = 'hello';\nconst char = str.charAt(1);\n// Print the character\nconsole.log(char);\n",
		"output": "e"
	},
	{
		"title": "String.charCodeAt",
		"description": "The `charCodeAt` method returns the Unicode of the character at a specified index in a string.",
		"example": "// Get the Unicode of the character at index 1\nconst str = 'hello';\nconst code = str.charCodeAt(1);\n// Print the Unicode code\nconsole.log(code);\n",
		"output": "101"
	},
	{
		"title": "String.codePointAt",
		"description": "The `codePointAt` method returns a number representing the UTF-16 code unit value at a given position.",
		"example": "// Get the code point at index 0\nconst str = 'hello';\nconst codePoint = str.codePointAt(0);\n// Print the code point\nconsole.log(codePoint);\n",
		"output": "104"
	},
	{
		"title": "String.concat",
		"description": "The `concat` method concatenates the string arguments to the calling string and returns a new string.",
		"example": "// Declare two strings\nconst str1 = 'Hello';\nconst str2 = ' world';\n// Concatenate the strings\nconst result = str1.concat(str2);\n// Print the result\nconsole.log(result); // 'Hello world'\n",
		"output": "'Hello world'"
	},
	{
		"title": "String.endsWith",
		"description": "The `endsWith` method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.",
		"example": "// Declare a string\nconst str = 'Hello, world!';\n// Check if the string ends with 'world!'\nconst endsWithWorld = str.endsWith('world!');\n// Print the result\nconsole.log(endsWithWorld); // true\n",
		"output": "true"
	},
	{
		"title": "String.fromCodePoint",
		"description": "The `fromCodePoint` method returns a string created from the specified sequence of code points.",
		"example": "// Create a string from code points\nconst str = String.fromCodePoint(104, 101, 108, 108, 111);\n// Print the string\nconsole.log(str);\n",
		"output": "hello"
	},
	{
		"title": "String.includes",
		"description": "The `includes` method checks if a string contains a specified value.",
		"example": "// Check if a string includes a substring\nconst str = 'hello world';\nconst includes = str.includes('world');\n// Print the result\nconsole.log(includes);\n",
		"output": "true"
	},
	{
		"title": "String.indexOf",
		"description": "The `indexOf` method returns the index of the first occurrence of a specified value in a string.",
		"example": "// Find the index of a substring\nconst str = 'hello world';\nconst index = str.indexOf('world');\n// Print the index\nconsole.log(index);\n",
		"output": "6"
	},
	{
		"title": "String.lastIndexOf",
		"description": "The `lastIndexOf` method returns the index within the calling string of the last occurrence of the specified value, or -1 if not found.",
		"example": "// Declare a string\nconst str = 'Hello, world! Hello again!';\n// Get the last index of 'Hello'\nconst index = str.lastIndexOf('Hello');\n// Print the index\nconsole.log(index); // 14\n",
		"output": "14"
	},
	{
		"title": "String.match",
		"description": "The `match` method retrieves the matches of a string against a regular expression.",
		"example": "// Match a string against a pattern\nconst str = 'hello world';\nconst result = str.match(/world/);\n// Print the result\nconsole.log(result);\n",
		"output": "['world']"
	},
	{
		"title": "String.replace",
		"description": "The `replace` method returns a new string with some or all matches of a pattern replaced by a replacement.",
		"example": "// Declare a string\nconst str = 'Hello world';\n// Replace 'world' with 'everyone'\nconst replaced = str.replace('world', 'everyone');\n// Print the replaced string\nconsole.log(replaced);\n",
		"output": "'Hello everyone'"
	},
	{
		"title": "String.replaceAll",
		"description": "The `replaceAll` method returns a new string with all occurrences of a specified value replaced by another value.",
		"example": "// Replace all occurrences of a substring\nconst str = 'hello world world';\nconst newStr = str.replaceAll('world', 'there');\n// Print the new string\nconsole.log(newStr);\n",
		"output": "hello there there"
	},
	{
		"title": "String.slice",
		"description": "The `slice` method extracts a section of a string and returns it as a new string.",
		"example": "// Extract a substring\nconst str = 'hello world';\nconst substr = str.slice(0, 5);\n// Print the substring\nconsole.log(substr);\n",
		"output": "hello"
	},
	{
		"title": "String.split",
		"description": "The `split` method splits a string into an array of substrings based on a specified separator.",
		"example": "// Split a string into an array\nconst str = 'a,b,c';\nconst array = str.split(',');\n// Print the array\nconsole.log(array);\n",
		"output": "['a', 'b', 'c']"
	},
	{
		"title": "String.startsWith",
		"description": "The `startsWith` method determines whether a string begins with the characters of a specified string, returning true or false as appropriate.",
		"example": "// Declare a string\nconst str = 'Hello, world!';\n// Check if the string starts with 'Hello'\nconst startsWithHello = str.startsWith('Hello');\n// Print the result\nconsole.log(startsWithHello); // true\n",
		"output": "true"
	},
	{
		"title": "String.substring",
		"description": "The `substring` method returns a part of the string between two specified indices.",
		"example": "// Extract a substring\nconst str = 'hello world';\nconst substr = str.substring(6, 11);\n// Print the substring\nconsole.log(substr);\n",
		"output": "world"
	},
	{
		"title": "String.toLowerCase",
		"description": "The `toLowerCase` method returns a new string with all characters converted to lowercase.",
		"example": "// Convert a string to lowercase\nconst str = 'HELLO';\nconst lowerStr = str.toLowerCase();\n// Print the lowercase string\nconsole.log(lowerStr);\n",
		"output": "hello"
	},
	{
		"title": "String.toUpperCase",
		"description": "The `toUpperCase` method returns a new string with all characters converted to uppercase.",
		"example": "// Convert a string to uppercase\nconst str = 'hello';\nconst upperStr = str.toUpperCase();\n// Print the uppercase string\nconsole.log(upperStr);\n",
		"output": "HELLO"
	},
	{
		"title": "String.trim",
		"description": "The `trim` method removes whitespace from both ends of a string.",
		"example": "// Declare a string with leading and trailing whitespace\nconst str = '   Hello, world!   ';\n// Trim the whitespace\nconst trimmedStr = str.trim();\n// Print the trimmed string\nconsole.log(trimmedStr); // 'Hello, world!'\n",
		"output": "'Hello, world!'"
	},
	{
		"title": "Symbol",
		"description": "The `Symbol` function returns a unique and immutable symbol primitive value.",
		"example": "// Create a new Symbol\nconst sym = Symbol('description');\n// Print the Symbol\nconsole.log(sym);\n",
		"output": "Symbol(description)"
	},
	{
		"title": "Symbol.for",
		"description": "The `Symbol.for` method returns a symbol that is shared globally across the application.",
		"example": "// Create a new Symbol or get an existing one\nconst globalSym = Symbol.for('global');\n// Print the Symbol\nconsole.log(globalSym);\n",
		"output": "Symbol(global)"
	},
	{
		"title": "WeakMap.set",
		"description": "The `set` method adds a new element to the WeakMap object with a specified key and value.",
		"example": "// Create a WeakMap\nconst weakMap = new WeakMap();\n// Declare an object\nconst obj = {};\n// Set a key-value pair in the WeakMap\nweakMap.set(obj, 'value');\n// Print the WeakMap\nconsole.log(weakMap.get(obj));\n",
		"output": "'value'"
	},
	{
		"title": "WeakSet.add",
		"description": "The `add` method adds a new object to the WeakSet object.",
		"example": "// Create a WeakSet\nconst weakSet = new WeakSet();\n// Declare an object\nconst obj = {};\n// Add the object to the WeakSet\nweakSet.add(obj);\n// Check if the object is in the WeakSet\nconsole.log(weakSet.has(obj));\n",
		"output": "true"
	},
	{
		"title": "WeakSet.has",
		"description": "The `has` method returns a boolean indicating whether a specified object is in the WeakSet.",
		"example": "// Create a WeakSet\nconst weakSet = new WeakSet();\n// Declare an object\nconst obj = {};\n// Add the object to the WeakSet\nweakSet.add(obj);\n// Check if the object is in the WeakSet\nconst hasObj = weakSet.has(obj);\n// Print the result\nconsole.log(hasObj);\n",
		"output": "true"
	},
	{
		"title": "array filter",
		"description": "The `filter` method creates a new array with all elements that pass the test implemented by the provided function.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n// Use filter to create a new array with only the even numbers\nconst evenNumbers = numbers.filter(num => num % 2 === 0);\n// Print the new array\nconsole.log(evenNumbers); // [2, 4]\n",
		"output": "[2, 4]"
	},
	{
		"title": "array find",
		"description": "The `find` method returns the value of the first element in the array that satisfies the provided testing function.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4];\n// Use find to get the first number greater than 2\nconst found = numbers.find(num => num > 2);\n// Print the found number\nconsole.log(found); // 3\n",
		"output": "3"
	},
	{
		"title": "array forEach",
		"description": "The `forEach` method executes a provided function once for each array element.",
		"example": "// Declare an array of colors\nconst colors = ['red', 'green', 'blue'];\n// Use forEach to print each color\ncolors.forEach(color => console.log(color));\n",
		"output": "red\ngreen\nblue"
	},
	{
		"title": "array includes",
		"description": "The `includes` method determines whether an array includes a certain value among its entries, returning true or false as appropriate.",
		"example": "// Declare an array of fruits\nconst fruits = ['apple', 'banana', 'orange'];\n// Check if the array includes 'banana'\nconst hasBanana = fruits.includes('banana');\n// Print the result\nconsole.log(hasBanana); // true\n",
		"output": "true"
	},
	{
		"title": "array map",
		"description": "The `map` method creates a new array with the results of calling a provided function on every element in the calling array.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4];\n// Use map to create a new array with each number doubled\nconst doubled = numbers.map(num => num * 2);\n// Print the new array\nconsole.log(doubled); // [2, 4, 6, 8]\n",
		"output": "[2, 4, 6, 8]"
	},
	{
		"title": "array reduce",
		"description": "The `reduce` method executes a reducer function on each element of the array, resulting in a single output value.",
		"example": "// Declare an array of numbers\nconst numbers = [1, 2, 3, 4];\n// Use reduce to sum up all the numbers\nconst sum = numbers.reduce((total, num) => total + num, 0);\n// Print the sum\nconsole.log(sum); // 10\n",
		"output": "10"
	},
	{
		"title": "arrays",
		"description": "Arrays are lists that can hold multiple items, like numbers or words. You can access items by their position in the list.",
		"example": "// Declare an array named numbers with 5 elements\nconst numbers = [1, 2, 3, 4, 5];\n// Print the first element of the array (index 0)\nconsole.log(numbers[0]); // 1\n// Print the number of elements in the array\nconsole.log(numbers.length); // 5\n",
		"output": "1\n5"
	},
	{
		"title": "arrow functions",
		"description": "Arrow functions are a shorter way to write functions. They are often used for small tasks and have a simpler syntax.",
		"example": "// Declare an arrow function named add that takes two arguments and returns their sum\nconst add = (a, b) => a + b;\n// Call the add function with 5 and 7 as arguments and print the result\nconsole.log(add(5, 7)); // 12\n",
		"output": "12"
	},
	{
		"title": "async/await",
		"description": "The `async` and `await` keywords enable asynchronous, promise-based behavior to be written in a cleaner style.",
		"example": "// Define an async function\nasync function fetchData() {\n    // Simulate fetching data using a promise\n    const data = await new Promise((resolve) => {\n        setTimeout(() => {\n            resolve('Data received');\n        }, 1000);\n    });\n    console.log(data);\n}\n// Call the async function\nfetchData(); // Data received\n",
		"output": "Data received"
	},
	{
		"title": "class",
		"description": "A class is a blueprint for creating objects with predefined properties and methods.",
		"example": "// Define a class\nclass Person {\n    // Constructor to initialize the object\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    // Method to get the person's details\n    getDetails() {\n        return `${this.name} is ${this.age} years old`;\n    }\n}\n// Create an instance of the class\nconst person = new Person('John', 30);\n// Print the person's details\nconsole.log(person.getDetails()); // John is 30 years old\n",
		"output": "John is 30 years old"
	},
	{
		"title": "class inheritance",
		"description": "Class inheritance allows you to create a class that is a child of another class, inheriting its properties and methods.",
		"example": "// Define a parent class\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    speak() {\n        console.log(`${this.name} makes a sound`);\n    }\n}\n// Define a child class that inherits from Animal\nclass Dog extends Animal {\n    speak() {\n        console.log(`${this.name} barks`);\n    }\n}\n// Create an instance of the child class\nconst dog = new Dog('Rex');\n// Call the speak method\nconsole.log(dog.speak()); // Rex barks\n",
		"output": "Rex barks"
	},
	{
		"title": "clearInterval",
		"description": "The `clearInterval` method cancels a repeating action which was established by `setInterval`.",
		"example": "// Define a function to be called repeatedly\nfunction sayHello() {\n    console.log('Hello, world!');\n}\n// Call the function every 1 second (1000 milliseconds)\nconst intervalId = setInterval(sayHello, 1000);\n// Clear the interval after 3 seconds\nsetTimeout(() => clearInterval(intervalId), 3000);\n",
		"output": "Hello, world!\nHello, world!\nHello, world!"
	},
	{
		"title": "clearTimeout",
		"description": "The `clearTimeout` method cancels a timeout previously established by `setTimeout`.",
		"example": "// Define a function to be called after a delay\nfunction sayHello() {\n    console.log('Hello, world!');\n}\n// Schedule the function to be called after 2 seconds\nconst timeoutId = setTimeout(sayHello, 2000);\n// Cancel the timeout before it fires\nclearTimeout(timeoutId);\n",
		"output": ""
	},
	{
		"title": "const",
		"description": "Use `const` to create a variable that you can't change once it's set. You must give it a value when you create it.",
		"example": "// Declare a constant y and assign it the value 30\nconst y = 30;\n// Try to change the value of y\ny = 40; // TypeError: Assignment to constant variable.\n",
		"output": "TypeError: Assignment to constant variable."
	},
	{
		"title": "default parameters",
		"description": "Set default values for function parameters if no value or undefined is passed.",
		"example": "// Declare a function with a default parameter\nfunction greet(name = 'Guest') {\n    // Return a greeting message\n    return `Hello, ${name}!`;\n}\n// Call the function without an argument\nconsole.log(greet()); // Hello, Guest!\n// Call the function with an argument\nconsole.log(greet('Alice')); // Hello, Alice!\n",
		"output": "Hello, Guest!\nHello, Alice!"
	},
	{
		"title": "destructuring arrays",
		"description": "Destructuring allows you to unpack values from arrays into distinct variables.",
		"example": "// Declare an array\nconst colors = ['red', 'green', 'blue'];\n// Use destructuring to unpack values into variables\nconst [firstColor, secondColor, thirdColor] = colors;\n// Print the variables\nconsole.log(firstColor); // red\nconsole.log(secondColor); // green\nconsole.log(thirdColor); // blue\n",
		"output": "red\ngreen\nblue"
	},
	{
		"title": "destructuring objects",
		"description": "Destructuring allows you to unpack values from objects into distinct variables.",
		"example": "// Declare an object\nconst person = { name: 'Alice', age: 28 };\n// Use destructuring to unpack values into variables\nconst { name, age } = person;\n// Print the variables\nconsole.log(name); // Alice\nconsole.log(age); // 28\n",
		"output": "Alice\n28"
	},
	{
		"title": "do...while loops",
		"description": "A `do...while` loop is like a `while` loop, but it always runs the code inside the block at least once, even if the condition is false.",
		"example": "// Declare a variable num and assign it the value 0\nlet num = 0;\n// Use a do...while loop to repeat the code inside the block\n// The code will run at least once\n// Check the condition after running the code inside the block\n// The loop will stop when num is no longer less than 5\n\ndo {\n    // Print the value of num\n    console.log(num);\n    // Increment num by 1\n    num++;\n} while (num < 5);\n",
		"output": "0\n1\n2\n3\n4"
	},
	{
		"title": "for loops",
		"description": "A `for` loop repeats a block of code a certain number of times. It's useful for tasks that need to be done repeatedly.",
		"example": "// Use a for loop to repeat the code inside the block 3 times\nfor (let i = 0; i < 3; i++) {\n    // Print the value of i in each iteration\n    console.log(i);\n}\n",
		"output": "0\n1\n2"
	},
	{
		"title": "function",
		"description": "A function is like a recipe that does something when you use it. You give it some information (called arguments) and it does a task, then gives you a result.",
		"example": "// Declare a function named greet that takes a name as an argument\nfunction greet(name) {\n    // Return a greeting message\n    return `Hello, ${name}!`;\n}\n// Call the greet function with 'Alice' as the argument and print the result\nconsole.log(greet('Alice')); // Hello, Alice!\n",
		"output": "Hello, Alice!"
	},
	{
		"title": "getDate",
		"description": "The `getDate` method returns the day of the month for the specified date according to local time.",
		"example": "// Create a new Date object for the current date and time\nconst now = new Date();\n// Get the day of the month from the Date object\nconst day = now.getDate();\n// Print the day of the month\nconsole.log(day); // e.g., 30\n",
		"output": "e.g., 30"
	},
	{
		"title": "getFullYear",
		"description": "The `getFullYear` method returns the year of the specified date according to local time.",
		"example": "// Create a new Date object for the current date and time\nconst now = new Date();\n// Get the year from the Date object\nconst year = now.getFullYear();\n// Print the year\nconsole.log(year); // e.g., 2024\n",
		"output": "e.g., 2024"
	},
	{
		"title": "getMonth",
		"description": "The `getMonth` method returns the month in the specified date according to local time, as a zero-based value (0-11).",
		"example": "// Create a new Date object for the current date and time\nconst now = new Date();\n// Get the month from the Date object\nconst month = now.getMonth();\n// Print the month\nconsole.log(month); // e.g., 6 (July)\n",
		"output": "e.g., 6 (July)"
	},
	{
		"title": "if statements",
		"description": "An `if` statement runs some code only if a certain condition is true. You can also use `else` to run code if the condition is false.",
		"example": "// Declare a variable age and assign it the value 18\nconst age = 18;\n// Check if age is greater than or equal to 18\nif (age >= 18) {\n    // Print 'Adult' if the condition is true\n    console.log('Adult');\n} else {\n    // Print 'Not an adult' if the condition is false\n    console.log('Not an adult');\n}\n",
		"output": "Adult"
	},
	{
		"title": "isFinite",
		"description": "The `isFinite` function determines whether a number is a finite value.",
		"example": "// Declare a finite number\nconst num1 = 123;\n// Declare an infinite number\nconst num2 = Infinity;\n// Check if num1 is finite\nconsole.log(isFinite(num1)); // true\n// Check if num2 is finite\nconsole.log(isFinite(num2)); // false\n",
		"output": "true\nfalse"
	},
	{
		"title": "isNaN()",
		"description": "The `isNaN` function determines whether a value is NaN (Not-a-Number).",
		"example": "// Check if a value is NaN\nconst result = isNaN('hello');\n// Print the result\nconsole.log(result);\n",
		"output": "true"
	},
	{
		"title": "let",
		"description": "Use `let` to create a variable that you can change later. Unlike `var`, `let` only works inside the block of code where you declare it.",
		"example": "// Declare a variable x and assign it the value 10\nlet x = 10;\nif (true) {\n    // Declare a new variable x inside this block and assign it the value 20\n    let x = 20;\n    // Print the value of x inside the block\n    console.log(x); // 20\n}\n// Print the value of x outside the block\nconsole.log(x); // 10\n",
		"output": "20\n10"
	},
	{
		"title": "objects",
		"description": "Objects are like boxes that hold different pieces of information. Each piece of information has a name (key) and a value.",
		"example": "// Declare an object named person with two properties: name and age\nconst person = {\n    name: 'Jane',\n    age: 30\n};\n// Print the value of the name property\nconsole.log(person.name); // Jane\n// Print the value of the age property using bracket notation\nconsole.log(person['age']); // 30\n",
		"output": "Jane\n30"
	},
	{
		"title": "parseFloat",
		"description": "The `parseFloat` function parses a string argument and returns a floating point number.",
		"example": "// Declare a string containing a floating point number\nconst str = '123.45';\n// Parse the string as a float\nconst num = parseFloat(str);\n// Print the float\nconsole.log(num); // 123.45\n",
		"output": "123.45"
	},
	{
		"title": "parseInt",
		"description": "The `parseInt` function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).",
		"example": "// Declare a string containing a number\nconst str = '123';\n// Parse the string as an integer\nconst num = parseInt(str, 10);\n// Print the integer\nconsole.log(num); // 123\n",
		"output": "123"
	},
	{
		"title": "promises",
		"description": "A promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
		"example": "// Create a new promise\nconst promise = new Promise((resolve, reject) => {\n    // Simulate an asynchronous operation using setTimeout\n    setTimeout(() => {\n        resolve('Success!');\n    }, 1000);\n});\n// Handle the promise result\npromise.then(result => console.log(result)); // Success!\n",
		"output": "Success!"
	},
	{
		"title": "rest parameters",
		"description": "Rest parameters allow you to represent an indefinite number of arguments as an array.",
		"example": "// Declare a function that uses rest parameters\nfunction sum(...numbers) {\n    // Use reduce to sum up all the numbers\n    return numbers.reduce((total, num) => total + num, 0);\n}\n// Call the function with multiple arguments\nconsole.log(sum(1, 2, 3, 4)); // 10\n",
		"output": "10"
	},
	{
		"title": "setDate",
		"description": "The `setDate` method sets the day of the month for a specified date according to local time.",
		"example": "// Create a new Date object for the current date and time\nconst now = new Date();\n// Set the day of the month to 15\nnow.setDate(15);\n// Print the updated Date object\nconsole.log(now); // e.g., 2024-07-15T12:34:56.789Z\n",
		"output": "e.g., 2024-07-15T12:34:56.789Z"
	},
	{
		"title": "setInterval",
		"description": "The `setInterval` method calls a function or evaluates an expression at specified intervals (in milliseconds).",
		"example": "// Define a function to be called repeatedly\nfunction sayHello() {\n    console.log('Hello, world!');\n}\n// Call the function every 1 second (1000 milliseconds)\nconst intervalId = setInterval(sayHello, 1000);\n// Clear the interval after 5 seconds\nsetTimeout(() => clearInterval(intervalId), 5000);\n",
		"output": "Hello, world!\nHello, world!\nHello, world!\nHello, world!\nHello, world!"
	},
	{
		"title": "setTimeout",
		"description": "The `setTimeout` method calls a function or evaluates an expression after a specified number of milliseconds.",
		"example": "// Define a function to be called after a delay\nfunction sayHello() {\n    console.log('Hello, world!');\n}\n// Call the function after 2 seconds (2000 milliseconds)\nsetTimeout(sayHello, 2000);\n",
		"output": "Hello, world!"
	},
	{
		"title": "spread operator (arrays)",
		"description": "The spread operator allows you to spread out elements of an array or object.",
		"example": "// Declare an array\nconst numbers = [1, 2, 3];\n// Use the spread operator to copy the elements into a new array\nconst newNumbers = [...numbers, 4, 5];\n// Print the new array\nconsole.log(newNumbers); // [1, 2, 3, 4, 5]\n",
		"output": "[1, 2, 3, 4, 5]"
	},
	{
		"title": "spread operator (objects)",
		"description": "The spread operator allows you to spread out properties of an object.",
		"example": "// Declare an object\nconst person = { name: 'John', age: 25 };\n// Use the spread operator to copy the properties into a new object\nconst newPerson = { ...person, city: 'New York' };\n// Print the new object\nconsole.log(newPerson); // { name: 'John', age: 25, city: 'New York' }\n",
		"output": "{ name: 'John', age: 25, city: 'New York' }"
	},
	{
		"title": "string concatenation",
		"description": "Combining two or more strings together to form a single string.",
		"example": "// Declare two variables with string values\nconst firstName = 'John';\nconst lastName = 'Doe';\n// Concatenate the strings using the + operator\nconst fullName = firstName + ' ' + lastName;\n// Print the concatenated string\nconsole.log(fullName); // John Doe\n",
		"output": "John Doe"
	},
	{
		"title": "string endsWith",
		"description": "The `endsWith` method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.",
		"example": "// Declare a string\nconst str = 'Hello, world!';\n// Check if the string ends with 'world!'\nconst endsWithWorld = str.endsWith('world!');\n// Print the result\nconsole.log(endsWithWorld); // true\n",
		"output": "true"
	},
	{
		"title": "string includes",
		"description": "The `includes` method determines whether one string may be found within another string, returning true or false as appropriate.",
		"example": "// Declare a string\nconst str = 'Hello, world!';\n// Check if the string includes 'world'\nconst hasWorld = str.includes('world');\n// Print the result\nconsole.log(hasWorld); // true\n",
		"output": "true"
	},
	{
		"title": "string length",
		"description": "The `length` property of a string returns the number of characters in the string.",
		"example": "// Declare a string\nconst str = 'Hello, world!';\n// Get the length of the string\nconst length = str.length;\n// Print the length\nconsole.log(length); // 13\n",
		"output": "13"
	},
	{
		"title": "string slice",
		"description": "The `slice` method extracts a section of a string and returns it as a new string, without modifying the original string.",
		"example": "// Declare a string\nconst str = 'Hello, world!';\n// Extract a section of the string from index 7 to 12\nconst slicedStr = str.slice(7, 12);\n// Print the extracted section\nconsole.log(slicedStr); // world\n",
		"output": "world"
	},
	{
		"title": "string split",
		"description": "The `split` method divides a string into an ordered list of substrings, puts these substrings into an array, and returns the array.",
		"example": "// Declare a string\nconst str = 'apple,banana,orange';\n// Split the string into an array of substrings\nconst fruits = str.split(',');\n// Print the array of substrings\nconsole.log(fruits); // ['apple', 'banana', 'orange']\n",
		"output": "['apple', 'banana', 'orange']"
	},
	{
		"title": "string startsWith",
		"description": "The `startsWith` method determines whether a string begins with the characters of a specified string, returning true or false as appropriate.",
		"example": "// Declare a string\nconst str = 'Hello, world!';\n// Check if the string starts with 'Hello'\nconst startsWithHello = str.startsWith('Hello');\n// Print the result\nconsole.log(startsWithHello); // true\n",
		"output": "true"
	},
	{
		"title": "string toLowerCase",
		"description": "The `toLowerCase` method returns the calling string value converted to lowercase.",
		"example": "// Declare a string\nconst str = 'HELLO';\n// Convert the string to lowercase\nconst lowerStr = str.toLowerCase();\n// Print the lowercase string\nconsole.log(lowerStr); // hello\n",
		"output": "hello"
	},
	{
		"title": "string toUpperCase",
		"description": "The `toUpperCase` method returns the calling string value converted to uppercase.",
		"example": "// Declare a string\nconst str = 'hello';\n// Convert the string to uppercase\nconst upperStr = str.toUpperCase();\n// Print the uppercase string\nconsole.log(upperStr); // HELLO\n",
		"output": "HELLO"
	},
	{
		"title": "string trim",
		"description": "The `trim` method removes whitespace from both ends of a string and returns a new string, without modifying the original string.",
		"example": "// Declare a string with leading and trailing whitespace\nconst str = '   Hello, world!   ';\n// Remove the whitespace\nconst trimmedStr = str.trim();\n// Print the trimmed string\nconsole.log(trimmedStr); // 'Hello, world!'\n",
		"output": "Hello, world!"
	},
	{
		"title": "switch statements",
		"description": "A `switch` statement runs different code based on the value of a variable or expression.",
		"example": "// Declare a variable day and assign it the value 'Monday'\nconst day = 'Monday';\n// Use a switch statement to print different messages based on the value of day\nswitch (day) {\n    case 'Monday':\n        console.log('Start of the work week');\n        break;\n    case 'Wednesday':\n        console.log('Midweek');\n        break;\n    case 'Friday':\n        console.log('End of the work week');\n        break;\n    default:\n        console.log('Regular day');\n}\n",
		"output": "Start of the work week"
	},
	{
		"title": "template literals",
		"description": "Template literals let you include variables inside strings easily. They use backticks (`) instead of quotes and allow for multi-line strings.",
		"example": "// Declare a variable name and assign it the value 'Bob'\nconst name = 'Bob';\n// Use a template literal to create a message that includes the name variable\nconst message = `Hello, ${name}!`;\n// Print the message\nconsole.log(message); // Hello, Bob!\n",
		"output": "Hello, Bob!"
	},
	{
		"title": "ternary operator",
		"description": "The ternary operator is a shorthand way to write an `if...else` statement. It takes three parts: a condition, a result for true, and a result for false.",
		"example": "// Declare a variable age and assign it the value 20\nconst age = 20;\n// Use the ternary operator to check if age is greater than or equal to 18\n// If true, the result is 'Adult'; if false, the result is 'Not an adult'\nconst status = age >= 18 ? 'Adult' : 'Not an adult';\n// Print the result\nconsole.log(status); // Adult\n",
		"output": "Adult"
	},
	{
		"title": "throw",
		"description": "The `throw` statement allows you to create a custom error.",
		"example": "// Define a function that throws a custom error\nfunction checkAge(age) {\n    if (age < 18) {\n        throw new Error('You must be at least 18 years old');\n    }\n    return 'Access granted';\n}\ntry {\n    // Call the function with an invalid age\n    console.log(checkAge(16));\n} catch (error) {\n    // Handle the error\n    console.log(error.message); // You must be at least 18 years old\n}\n",
		"output": "You must be at least 18 years old"
	},
	{
		"title": "try...catch",
		"description": "A `try...catch` statement lets you handle errors in your code. You put the code that might cause an error in the `try` block, and the code to handle the error in the `catch` block.",
		"example": "// Use a try...catch statement to handle errors\ntry {\n    // Code that might cause an error\n    const result = someFunction(); // someFunction is not defined\n    console.log(result);\n} catch (error) {\n    // Code to handle the error\n    console.log('An error occurred:', error.message);\n}\n",
		"output": "An error occurred: someFunction is not defined"
	},
	{
		"title": "try/catch",
		"description": "The `try` statement allows you to define a block of code to be tested for errors while it is being executed, and the `catch` statement lets you handle the error.",
		"example": "// Define a function that throws an error\nfunction riskyFunction() {\n    throw new Error('Something went wrong');\n}\ntry {\n    // Call the function inside the try block\n    riskyFunction();\n} catch (error) {\n    // Handle the error in the catch block\n    console.log(error.message); // Something went wrong\n}\n",
		"output": "Something went wrong"
	},
	{
		"title": "var",
		"description": "Use `var` to create a variable that can be changed and can be used in different parts of the code. `var` is older and not as safe as `let` or `const`.",
		"example": "// Declare a variable z and assign it the value 50\nvar z = 50;\nif (true) {\n    // Redeclare and assign a new value to z inside this block\n    var z = 60;\n    // Print the value of z inside the block\n    console.log(z); // 60\n}\n// Print the value of z outside the block\nconsole.log(z); // 60\n",
		"output": "60\n60"
	},
	{
		"title": "while loops",
		"description": "A `while` loop repeats a block of code as long as a certain condition is true.",
		"example": "// Declare a variable count and assign it the value 0\nlet count = 0;\n// Use a while loop to repeat the code inside the block as long as count is less than 3\nwhile (count < 3) {\n    // Print the value of count\n    console.log(count);\n    // Increment count by 1\n    count++;\n}\n",
		"output": "0\n1\n2"
	}
]
